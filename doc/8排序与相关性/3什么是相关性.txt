检索词频率
检索词在该字段出现的频率？出现频率越高，相关性也越高。 字段中出现过 5 次要比只出现过 1 次的相关性高。
反向文档频率
每个检索词在索引中出现的频率？频率越高，相关性越低。检索词出现在多数文档中会比出现在少数文档中的权重更低。
字段长度准则
字段的长度是多少？长度越长，相关性越低。 检索词出现在一个短的 title 要比同样的词出现在一个长的 content 字段权重更大。

POST	/megacorp/_search?explain=true
返回会增加：
"_explanation": {
   "description": "weight(tweet:honeymoon in 0)							1
                  [PerFieldSimilarity], result of:",
   "value":       0.076713204,
   "details": [
      {
         "description": "fieldWeight in 0, product of:",
         "value":       0.076713204,
         "details": [
            {  															2
               "description": "tf(freq=1.0), with freq of:",
               "value":       1,
               "details": [
                  {
                     "description": "termFreq=1.0",
                     "value":       1
                  }
               ]
            },
            { 															3
               "description": "idf(docFreq=1, maxDocs=1)",
               "value":       0.30685282
            },
            { 															4
               "description": "fieldNorm(doc=0)",
               "value":        0.25,
            }
         ]
      }
   ]
}
1、honeymoon 相关性评分计算的总结
2、检索词频率
3、反向文档频率
4、字段长度准则

输出 explain 结果代价是十分昂贵的，它只能用作调试工具 。千万不要用于生产环境。

第一部分是关于计算的总结。告诉了我们 honeymoon在 tweet字段中的检索词频率/反向文档频率或 TF/IDF， （这里的文档 0 是一个
内部的 ID，跟我们没有关系，可以忽略。）
然后它提供了权重是如何计算的细节：
检索词频率:检索词 `honeymoon` 在这个文档的 `tweet` 字段中的出现次数。
反向文档频率:检索词 `honeymoon` 在索引上所有文档的 `tweet` 字段中出现的次数。
字段长度准则:在这个文档中， `tweet` 字段内容的长度 -- 内容越长，值越小。

post	/megacorp/employee/1/_explain
{
    "query": {
        "bool": {
        	"filter" : { "term" :  { "first_name" : "abc"}},
	        "should":   { "match": { "about": "like" }}
	    }
    }
}
我们现在有了一个 description 元素，它将告诉我们：
"description": "first_name:abc doesn't match id 0",
也就是说我们的过滤子句使该文档不能匹配到。