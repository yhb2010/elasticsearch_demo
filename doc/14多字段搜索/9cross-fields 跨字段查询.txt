自定义_all的方式是一个好的解决方案，只需在索引文档前为其设置好映射。 不过，Elasticsearch还在搜索时提供了相应的解决方案：使用cross_fields类型进
行multi_match查询。cross_fields使用词中心式（term-centric）的查询方式，这与best_fields和most_fields使用字段中心式（field-centric）的查
询方式非常不同，它将所有字段当成一个大字段，并在每个字段中查找每个词 。

cross_fields类型首先分析查询字符串并生成一个词列表，然后它从所有字段中依次搜索每个词。
{
    "query": {
        "multi_match": {
            "query":       "peter smith",
            "type":        "cross_fields",
            "operator":    "and",
            "fields":      [ "first_name", "last_name" ]
        }
    }
}
为了让cross_fields查询以最优方式工作，所有的字段都须使用相同的分析器， 具有相同分析器的字段会被分组在一起作为混合字段使用。如果包括了不同分析链的字
段，它们会以best_fields的相同方式被加入到查询结果中。

采用 cross_fields 查询与 自定义 _all 字段 相比，其中一个优势就是它可以在搜索时为单个字段提升权重。
这对像 first_name 和 last_name 具有相同值的字段并不是必须的，但如果要用 title 和 description 字段搜索图书，可能希望为 title 分配更多的权重，这
同样可以使用前面介绍过的 ^ 符号语法来实现：
	GET /books/_search
	{
	    "query": {
	        "multi_match": {
	            "query":       "peter smith",
	            "type":        "cross_fields",
	            "fields":      [ "title^2", "description" ]
	        }
	    }
	}

将 not_analyzed 字段与 multi_match 中 analyzed 字段混在一起没有多大用处：
	GET /_validate/query?explain
	{
	    "query": {
	        "multi_match": {
	            "query":       "peter smith",
	            "type":        "cross_fields",
	            "fields":      [ "title", "first_name", "last_name" ]
	        }
	    }
	}
	因为 title 字段是未分析过的，Elasticsearch 会将 “peter smith” 这个完整的字符串作为查询条件来搜索！
	title:peter smith
	(
	    blended("peter", fields: [first_name, last_name])
	    blended("smith", fields: [first_name, last_name])
	)
	显然这个项不在 title 的倒排索引中