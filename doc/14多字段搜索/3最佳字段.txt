假设有个网站允许用户搜索博客的内容， 以下面两篇博客内容文档为例：
	PUT /my_index/my_type/1
	{
	    "title": "Quick brown rabbits",
	    "body":  "Brown rabbits are commonly seen."
	}

	PUT /my_index/my_type/2
	{
	    "title": "Keeping pets healthy",
	    "body":  "My quick brown fox eats rabbits on a regular basis."
	}
用户输入词组 “Brown fox” 然后点击搜索按钮。事先，我们并不知道用户的搜索项是会在 title 还是在 body 字段中被找到，但是，用户很有可
能是想搜索相关的词组。用肉眼判断，文档 2 的匹配度更高，因为它同时包括要查找的两个词：
现在运行以下 bool 查询：
	"should": [
        { "match": { "title": "Brown fox" }},
        { "match": { "body":  "Brown fox" }}
    ]
但是我们发现查询的结果是文档1的评分更高。
为了理解导致这样的原因， 需要回想一下 bool 是如何计算评分的：
	1、它会执行 should 语句中的两个查询。
	2、加和两个查询的评分。
	3、乘以匹配语句的总数。
	4、除以所有语句总数（这里为：2）。
文档1的两个字段都包含brown这个词，所以两个match语句都能成功匹配并且有一个评分。文档2的body字段同时包含brown和fox这两个词，但
title字段没有包含任何词。这样，body查询结果中的高分，加上title查询中的0分，然后乘以二分之一，就得到比文档1更低的整体评分。

不使用 bool 查询，可以使用 dis_max 即分离 最大化查询（Disjunction Max Query） 。指的是： 将任何与任一查询匹配的文档作为结果返回，
但只将最佳匹配的评分作为查询的评分结果返回 ：
	{
	    "query": {
	        "dis_max": {
	            "queries": [
	                { "match": { "title": "Brown fox" }},
	                { "match": { "body":  "Brown fox" }}
	            ]
	        }
	    }
	}
	得到我们想要的结果，文档2分高。