搜索 1 个有着 50 个分片的索引与搜索 50 个每个都有 1 个分片的索引完全等价：搜索请求均命中 50 个分片。
当你需要在不停服务的情况下增加容量时，下面有一些有用的建议。相较于将数据迁移到更大的索引中，你可以仅仅做下面这些操作：
	1、创建一个新的索引来存储新的数据。
	2、同时搜索两个索引来获取新数据和旧数据。

实际上，通过一点预先计划，添加一个新索引可以通过一种完全透明的方式完成，你的应用程序根本不会察觉到任何的改变。
在 索引别名和零停机，我们提到过使用索引别名来指向当前版本的索引。 举例来说，给你的索引命名为 tweets_v1 而不是tweets。你的应用程序会与tweets进行
交互，但事实上它是一个指向 tweets_v1 的别名。 这允许你将别名切换至一个更新版本的索引而保持服务运转。
我们可以使用一个类似的技术通过增加一个新索引来扩展容量。这需要一点点规划，因为你需要两个别名：一个用于搜索另一个用于索引数据：
	PUT /tweets_1/_alias/tweets_search
	PUT /tweets_1/_alias/tweets_index
	tweets_search 与 tweets_index 这两个别名都指向索引 tweets_1 。
新文档应当索引至 tweets_index ，同时，搜索请求应当对别名 tweets_search 发出。目前，这两个别名指向同一个索引。
当我们需要额外容量时，我们可以创建一个名为 tweets_2 的索引，并且像这样更新别名：
	POST /_aliases
	{
	  "actions": [
	    { "add":    { "index": "tweets_2", "alias": "tweets_search" }},
	    { "remove": { "index": "tweets_1", "alias": "tweets_index"  }},
	    { "add":    { "index": "tweets_2", "alias": "tweets_index"  }}
	  ]
	}
一个文档 GET 请求，像一个索引写入请求那样，只能以单个索引为目标。 这导致在通过ID获取文档这样的场景下有一点复杂。作为代替，你可以对 tweets_1 以及
tweets_2 运行一个 ids 查询 搜索请求， 或者 multi-get 请求。