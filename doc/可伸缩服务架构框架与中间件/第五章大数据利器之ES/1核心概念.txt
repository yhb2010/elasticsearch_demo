1、cluster：集群，由一个或多个ES节点组成
2、node：节点，组成ES集群的服务单元，同一个集群内节点的名字不能重复，通常在一个节点上分配一个或者多个分片
3、shards：分片，当索引上的数据量太大的时候，我们通常会将一个索引上的数据进行水平拆分，拆分出来的每个数据块叫做一个分片。在一个多分片的索引中写入数据时，
通过路由来确定具体写入哪一个分片中，所以在创建索引时需要指定分片的数量，并且分片的数量一旦确定就不能更改。分片后的索引带来了规模上（数据水平切分）和性能
上（并行执行）的提升。每个分片都是Lucene中的一个索引文件，每个分片必须有一个主分片和零到多个副本分片。
4、replicas：备份也叫作副本，是指对主分片的备份。主分片和备份分片都可以对外提供查询服务，写操作时先在主分片上完成，然后分发到备份上。当主分片不可用时，
会在备份的分片中选举出一个作为主分片，所以备份不仅可以提升系统的高可用性能，还可以提升搜索时的并发性能，但是若副本太多的话，在写操作时会增加数据同步的负
担。
5、index：索引，由一个和多个分片组成，通过索引的名字在集群内进行唯一标识。
6、type：类别，指索引内部的逻辑分区，通过type的名字在索引内进行唯一标识，在查询时如果没有该值，则表示在整个索引中查询。
7、document：文档，索引中的每一条数据叫做一个文档，类似于关系型数据库中的一条数据，通过_id在type内进行唯一标识。
8、settings：对集群中索引的定义，比如一个索引默认的分片数、副本数等信息。
9、mappings：类似于关系型数据库中的表结构信息，用于定义索引中字段field的存储类型、分词方式、是否存储等信息。ES中的mapping是可以动态识别的。如果没有特
殊需求，则不需要手动创建mapping，因为ES会自动根据数据格式识别它的类型，但是当需要对某些字段添加特殊属性（比如：定义使用其他分词器、是否分词、是否存储）时
，就需要手动设置mapping了。一个索引的mapping一旦创建，若已经存储了数据，就不可修改了。
10、analyzer：字段的分词方式的定义。一个analyzer通常由一个tokenizer、零到多个Filter组成。比如默认的标准analyzer包含一个标准的tokenizer和三个
filter：Standard Token Filter、LowerCase Token Filter、Stop Token Filter。

ES节点分类：
1、主节点：负责创建索引、删除索引、分配分片、追踪集群中的节点状态等工作。ES中的主节点的工作量比较轻。用户的请求可以发往任何一个节点，并由该节点负责分发请
求、收集结果等操作，而并不需要经过主节点转发。通过在配置文件中设置node.master=true来设置该节点成为候选主节点（但该节点并不一定是主节点，主节点是集群在
候选节点中选举出来的），在ES集群中只有候选节点才有选举权和被选举权。其它节点是不参与选举工作的。
2、数据节点：负责数据的存储和相关具体操作，比如索引数据的创建、修改、删除、搜索、聚合。所以，数据节点对机器配置要求比较高，首先需要有足够的磁盘空间来存储
数据，其次数据操作对系统cpu、memory和io的性能消耗都很大。通常随着集群的扩大，需要增加更多的数据节点来提高可用性。通过在配置文件中设置node.data=true
来设置该节点成为数据节点。
3、客户端节点：既不做候选主节点也不做数据节点的节点，只负责请求的分发、汇总等，也就是下面要说的协调节点的角色。其实任何一个节点都可以完成这样的工作，单独
增加这样的节点更多的是为了提高并发性。
可在配置文件中设置该节点为客户端节点：
	node.master=false
	node.data=false
4、部落节点：
	部落节点可以跨越多个集群，他可以接收每个集群的状态，然后合并成一个全局集群的状态，他可以读写所有集群节点上的数据，在配置文件中通过如下设置使节点成为
	部落节点：
	tribe：
		one：
			cluster.name: cluster_one
		two：
			cluster.name: cluster_two
	因为tribe Node要在ES7以后移除，所以不建议使用
5、协调节点：
	是一种角色，而不是真实的ES节点，我们没有办法通过配置项来配置哪个节点为协调节点，集群中的任何节点都可以充当协调节点的角色，当一个节点a收到用户的查询
	请求后，会把查询语句分发到其它的节点，然后合并各个节点返回的查询结果，最后返回一个完整的数据集给用户。在这个过程中，节点a扮演的就是协调节点的角色。
	由此可见，协调节点会对cpu memory和io要求比较高。

集群的状态有green、yellow、red三种：
	1、green：健康，所有的主分片和副本分片都可正常工作，集群100%健康
	2、yellow：预警，所有主分片都可以正常工作，但至少有一个副本分片是不能正常工作的。此时集群可以正常工作，但是集群的高可用性在某种程度上被弱化。
	3、red：集群不可正常工作，集群中至少有一个分片的主分片及它的全部副本分片都不可正常工作。此时虽然集群的查询操作还可以进行，但是也只能返回部分数据，而
	分配到这个分片上的写入请求将会报错，最终会导致数据的丢失。