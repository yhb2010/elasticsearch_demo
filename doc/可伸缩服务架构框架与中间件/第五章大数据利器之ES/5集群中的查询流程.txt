例子：node1：r0、p1
	 node2：r0、r1
	 node3：p0、r1

1、客户端向集群发送查询请求，集群再随机选择一个节点作为协调节点(node1)，负责处理这次查询任务。

2、node1使用文档的_id来计算要查询的文档在哪个分片上(在本例中落在了0分片上)。分片0的副本分片存在所有的三个节点上，在这种情况下，协调节点可以把请求
转发到任意节点，本例将请求转发到node2上。

3、node2执行查找，并将结果返回给协调节点node1，node1再将文档返回给客户端。

在处理读取请求时，协调节点在每次请求时都会通过轮询所有的副本分片来达到负载均衡。

如果是普通查询，在查询前并不知道数据在哪个分片上，这时就需要查询所有分片，然后汇总数据，再把满足条件的数据返回给客户端，这种查询比根据routing id查
询要复杂很多，性能差很多。这种查询的流程如下：
	1、客户端发送一个查询请求到任意节点，在本例中是node3，node3会创建一个大小为from+size的空优先队列。
	2、node3将查询请求转发到索引的每个主分片或副本分片中。每个分片在本地执行查询并添加结果到大小为from+size的本地有序优先队列中。
	3、在默认情况下每个分片返回各自优先队列中所有文档的id和得分score给协调节点，协调节点合并这些值到自己的优先队列中来产生一个全局排序后的结果列表。

当一个搜索请求被发送到某个节点时，这个节点就变成了协调节点。它的任务是广播查询请求到所有相关的分片(主分片或副本分片)，并将结果整合成全局排序后的结果集
合，默认返回给协调节点的不是所有数据，只有文档id和得分，因为我们最后只返回给用户size条数据，所以这样做的好处是可以节省很多带宽，特别是from很大时。协
调节点对收集到的数据进行排序后，找到要返回的size条数据的id，再根据id查询要返回的数据，比如title、content等。流程如下：
	1、node3进行二次排序来找出要返回的文档id，并向相关的分片提交多个获得文档详情的请求
	2、每个分片加载文档，并将文档返回给node3
	3、一旦所有的文档都被取回了，node3就返回结果给客户端

协调节点收集各个分片查询的数据，再进行二次排序，然后选择需要被取回的文档。例如，如果我们的查询指定了(from:20, size:10)，那么我们需要在每个分片中查询
出来得分最高的20+10条数据，协调节点在收集到30*n(n是分片数)条数据后再进行排序，排序位置在0-20的结果被丢弃，只有从21开始的10个结果需要被取回。

由此可知，在查询时深翻并不是好办法，因为from会很大，这时的排序过程会变得非常沉重，会占用大量的cpu、内存和带宽。所以建议慎用深翻。
分片可以减少每个片上的数据量，加快查询速度，但是在查询时，协调节点要在收集(from+size)*n条数据后再做一次全局排序，若这个数据量很大，则会占用大量的cpu、
内存、带宽等，并且分片查询的速度取决于最慢的分片查询的速度，所以分片数并不是越多越好。