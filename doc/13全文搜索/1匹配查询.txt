匹配查询 match 是个 核心 查询。无论需要查询什么字段， match 查询都应该会是首选的查询方式。 它是一个高级 全文查询 ，这表示它既能处理全文字段，又能处理
精确字段。

单个词查询：
我们用一个示例来解释使用 match 查询搜索全文字段中的单个词：
	GET /my_index/my_type/_search
	{
	    "query": {
	        "match": {
	            "title": "QUICK!"
	        }
	    }
	}
Elasticsearch 执行上面这个 match 查询的步骤是：
	1、检查字段类型 。
	标题 title 字段是一个 string 类型（ analyzed ）已分析的全文字段，这意味着查询字符串本身也应该被分析。
	2、分析查询字符串 。
	将查询的字符串 QUICK! 传入标准分析器中，输出的结果是单个项 quick 。因为只有一个单词项，所以 match 查询执行的是单个底层 term 查询。
	3、查找匹配文档 。
	用 term 查询在倒排索引中查找 quick 然后获取一组包含该项的文档，本例的结果是文档：1、2 和 3 。
	4、为每个文档评分 。
	用 term 查询计算每个文档相关度评分 _score ，这是种将 词频（term frequency，即词 quick 在相关文档的 title 字段中出现的频率）和反向文档频率
	（inverse document frequency，即词 quick 在所有文档的 title 字段中出现的频率），以及字段的长度（即字段越短相关度越高）相结合的计算方式。

多词查询：
	GET /my_index/my_type/_search
	{
	    "query": {
	        "match": {
	            "title": "BROWN DOG!"
	        }
	    }
	}
	match查询必须查找两个词（ ["brown","dog"] ），它在内部实际上先执行两次term查询，然后将两次查询的结果合并作为最终结果输出。为了做到这点，
	它将两个term查询包入一个bool查询中。

提高精度：
	match 查询还可以接受operator操作符作为输入参数，默认情况下该操作符是or。我们可以将它修改成and让所有指定词项都必须匹配：
	GET /my_index/my_type/_search
	{
	    "query": {
	        "match": {
	            "title": {
	                "query":    "BROWN DOG!",
	                "operator": "and"
	            }
	        }
	    }
	}

控制精度：
	match查询支持minimum_should_match最小匹配参数， 这让我们可以指定必须匹配的词项数用来表示一个文档是否相关。我们可以将其设置为某个具体数字，
	更常用的做法是将其设置为一个百分数，因为我们无法控制用户搜索时输入的单词数量：
	GET /my_index/my_type/_search
	{
	  "query": {
	    "match": {
	      "title": {
	        "query":                "quick brown dog",
	        "minimum_should_match": "75%"
	      }
	    }
	  }
	}
	当给定百分比的时候， minimum_should_match 会做合适的事情：在之前三词项的示例中， 75% 会自动被截断成 66.6% ，即三个里面两个词。