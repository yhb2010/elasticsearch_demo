直方图 histogram 特别有用。 它本质上是一个条形图，创建直方图需要指定一个区间，如果我们要为售价创建一个直方图，可以将间隔设为20,000。
这样做将会在每个 $20,000 档创建一个新桶，然后文档会被分到对应的桶中。
	GET /cars/transactions/_search
	{
	   "size" : 0,
	   "aggs":{
	      "price":{
	         "histogram":{ histogram 桶要求两个参数：一个数值字段以及一个定义桶大小间隔。
	            "field": "price",
	            "interval": 20000
	         },
	         "aggs":{
	            "revenue": {
	               "sum": {	sum 度量嵌套在每个售价区间内，用来显示每个区间内的总收入。
	                 "field" : "price"
	               }
	             }
	         }
	      }
	   }
	}
如我们所见，查询是围绕 price 聚合构建的，它包含一个histogram桶。它要求字段的类型必须是数值型的同时需要设定分组的间隔范围。 间隔设置
为 20,000 意味着我们将会得到如 [0-19999, 20000-39999, ...] 这样的区间。

让我们以最受欢迎 10 种汽车以及它们的平均售价、标准差这些信息创建一个条形图。 我们会用到 terms 桶和 extended_stats 度量：
	GET /cars/transactions/_search
	{
	  "size" : 0,
	  "aggs": {
	    "makes": {
	      "terms": {
	        "field": "make",
	        "size": 10
	      },
	      "aggs": {
	        "stats": {
	          "extended_stats": {
	            "field": "price"
	          }
	        }
	      }
	    }
	  }
	}
上述代码会按受欢迎度返回制造商列表以及它们各自的统计信息。我们对其中的 stats.avg 、 stats.count 和 stats.std_deviation 信息特别
感兴趣，并用 它们计算出标准差：
	std_err = std_deviation / count