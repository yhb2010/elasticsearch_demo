由于嵌套对象 被索引在独立隐藏的文档中，我们无法直接查询它们。 相应地，我们必须使用 nested 查询 去获取它们：
	GET /my_index/blogpost/_search
	{
	  "query": {
	    "bool": {
	      "must": [
	        {
	          "match": {
	            "title": "eggs"	title 子句是查询根文档的。
	          }
	        },
	        {
	          "nested": {
	            "path": "comments",	nested子句作用于嵌套字段comments。在此查询中，既不能查询根文档字段，也不能查询其他嵌套文档。
	            "query": {
	              "bool": {
	                "must": [	comments.name 和 comments.age 子句操作在同一个嵌套文档中。
	                  {
	                    "match": {
	                      "comments.name": "john"
	                    }
	                  },
	                  {
	                    "match": {
	                      "comments.age": 28
	                    }
	                  }
	                ]
	              }
	            }
	          }
	        }
	      ]
	}}}
	nested 字段可以包含其他的nested字段。同样地，nested查询也可以包含其他的nested查询。而嵌套的层次会按照你所期待的被应用。

默认情况下，根文档的分数是这些嵌套文档分数的平均值。可以通过设置score_mode参数来控制这个得分策略，相关策略有avg (平均值), max
(最大值), sum (加和) 和 none (直接返回 1.0 常数值分数)。
	...
	"nested": {
        "path": "comments",
        "score_mode": "max",	返回最优匹配嵌套文档的 _score 给根文档使用。
        "query": {
        	...
如果 nested 查询放在一个布尔查询的 filter 子句中，其表现就像一个 nested 查询，只是 score_mode 参数不再生效。因为它被用于不打分的查
询中 — 只是符合或不符合条件，不必打分 — 那么 score_mode 就没有任何意义，因为根本就没有要打分的地方。