以下有两种情况可能出现：
你决定使用 version （版本）号，在这种情况下，当与 README.txt 文件重命名的版本号产生冲突时，你的批量重命名操作将会失败。
你没有使用版本控制，你的变更将覆盖其他用户的变更。
问题的原因是 Elasticsearch不支持 ACID事务。 对单个文件的变更是 ACIDic 的，但包含多个文档的变更不支持。

如果你的主要数据存储是关系数据库，并且Elasticsearch仅仅作为一个搜索引擎 或一种提升性能的方法，可以首先在数据库中执行变更动作，然后
在完成后将这些变更复制到 Elasticsearch。 通过这种方式，你将受益于数据库 ACID 事务支持，并且在 Elasticsearch 中以正确的顺序产生变
更。 并发在关系数据库中得到了处理。

如果你不使用关系型存储，这些并发问题就需要在 Elasticsearch 的事务水准进行处理。 以下是三个切实可行的使用 Elasticsearch 的解决方案，
它们都涉及某种形式的锁：
	全局锁
	文档锁
	树锁

全局锁：
	通过在任何时间只允许一个进程来进行变更动作，我们可以完全避免并发问题。 大多数的变更只涉及少量文件，会很快完成。一个顶级目录的重命
	名操作会对其他变更造成较长时间的阻塞，但可能很少这样做。
	因为在 Elasticsearch 文档级别的变更支持 ACIDic，我们可以使用一个文档是否存在的状态作为一个全局锁。 为了请求得到锁，我们尝试
	create全局锁文档：
	PUT /fs/lock/global/_create
	{}
	如果这个 create 请求因冲突异常而失败，说明另一个进程已被授予全局锁，我们将不得不稍后再试。 如果请求成功了，我们自豪的成为全局锁的
	主人，然后可以继续完成我们的变更。一旦完成，我们就必须通过删除全局锁文档来释放锁：
	DELETE /fs/lock/global

文档锁：
	我们可以使用前面描述相同的方法技术来锁定个体文档，而不是锁定整个文件系统。
	完整的 update 请求如下所示：
	POST /fs/lock/1/_update
	{
	  "upsert": { "process_id": 123 },
	  "script": "if ( ctx._source.process_id != process_id )
	  { assert false }; ctx.op = 'noop';"
	  "params": {
	    "process_id": 123
	  }
	}
	如果文档并不存在，upsert文档将会被插入--和前面create请求相同。 但是，如果该文件确实存在，该脚本会查看存储在文档上的process_id
	。 如果process_id匹配，更新不会执行（ noop ）但脚本会返回成功。 如果两者并不匹配，assert false抛出一个异常，你也知道了获取锁的
	尝试已经失败。
	一旦所有锁已成功创建，你就可以继续进行你的变更。
	之后，你必须释放所有的锁，通过检索所有的锁文档并进行批量删除，可以完成锁的释放：
	POST /fs/_refresh refresh 调用确保所有 lock 文档对搜索请求可见。
	GET /fs/lock/_search?scroll=1m 当你需要在单次搜索请求返回大量的检索结果集时，你可以使用 scroll 查询。
	{
	    "sort" : ["_doc"],
	    "query": {
	        "match" : {
	            "process_id" : 123
	        }
	    }
	}

	PUT /fs/lock/_bulk
	{ "delete": { "_id": 1}}
	{ "delete": { "_id": 2}}
