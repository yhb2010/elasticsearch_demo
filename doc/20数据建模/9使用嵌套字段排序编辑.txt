POST	/my_index/blogpost/3
{
  "title": "Nest eggs",
  "body":  "Making your money work...",
  "tags":  [ "cash", "shares" ],
  "comments": [
    {
      "name":    "John Smith",
      "comment": "Great article",
      "age":     28,
      "stars":   2,
      "date":    "2014-09-05"
    },
    {
      "name":    "Alice White",
      "comment": "More like this please",
      "age":     31,
      "stars":   30,
      "date":    "2014-10-14"
    }
  ]
}

假如我们想要查询在10月份收到评论的博客文章，并且按照 stars 数的最小值来由小到大排序，那么查询语句如下：
POST	/my_index/blogpost/_search
{
    "query":{
        "nested":{ 此处的 nested 查询将结果限定为在10月份收到过评论的博客文章。
            "path":"comments",
            "query":{
                "range":{
                    "comments.date":{
                        "gte":"2014-10-01",
                        "lt":"2014-11-01"
                    }
                }
            }
        }
    },
    "sort":{
        "comments.stars":{
            "order":"asc",	结果按照匹配的评论中 comment.stars 字段的最小值 (min) 来由小到大 (asc) 排序。
            "mode":"min",
            "nested":{
                "path":"comments",
                "filter":{	排序子句中的 nested_path 和 nested_filter 和 query 子句中的 nested 查询相同，原因在下面有解释。
                    "range":{
                        "comments.date":{
                            "gte":"2014-10-01",
                            "lt":"2014-11-01"
                        }
                    }
                }
            }
        }
    }
}
原因在于，排序发生在查询执行之后。 查询条件限定了在10月份收到评论的博客文档，但返回的是博客文档。如果我们不在排序子句中加入nested_filter， 那么我们
对博客文档的排序将基于博客文档的所有评论，而不是仅仅在10月份接收到的评论。